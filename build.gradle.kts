/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */
import org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
    scala

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    flatDir{
        dirs("libs/IDES3api")
    }

    // https://www.scalatest.org/install
    maven {
        // <id>artima</id>
        name = "Artima Maven Repository"
        url = uri("https://repo.artima.com/releases")
    }
}

dependencies {
    val scalaVersion = "2.13"

    implementation(files("libs/IDES3api/IDES-3.1.3-api.jar"))

    // Use Scala 2.13 in our library project
    implementation("org.scala-lang:scala-library:2.13.2")

    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation("org.typelevel:cats-core_2.13:2.2.0")

    // https://mvnrepository.com/artifact/io.vavr/vavr
    implementation("io.vavr:vavr:0.10.3")

    // https://mvnrepository.com/artifact/com.esotericsoftware.yamlbeans/yamlbeans
    implementation("com.esotericsoftware.yamlbeans:yamlbeans:1.15")

    // https://mvnrepository.com/artifact/org.graalvm.js/js
    implementation("org.graalvm.js:js:20.3.0")
    // https://mvnrepository.com/artifact/org.graalvm.js/js-scriptengine
    implementation("org.graalvm.js:js-scriptengine:20.3.0")
    // https://mvnrepository.com/artifact/org.graalvm.truffle/truffle-api
    implementation("org.graalvm.truffle:truffle-api:20.3.0")

    testImplementation("junit:junit:4.13")
    testImplementation("org.scalatest:scalatest_$scalaVersion:3.2.6")
    testImplementation("org.scalatestplus:junit-4-13_$scalaVersion:3.2.2.0")

    implementation("org.scalactic:scalactic_$scalaVersion:3.2.6")
}

sourceSets {
    main {
        withConvention(ScalaSourceSet::class) {
            scala {
                setSrcDirs(listOf("src/main"))
            }
        }
        java {
            setSrcDirs(emptyList<String>())
        }
    }

    test {
        withConvention(ScalaSourceSet::class) {
            scala {
                setSrcDirs(listOf("src/test"))
            }
        }
        java {
            setSrcDirs(emptyList<String>())
        }
    }
}

tasks {
    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        //destinationDir = file("../IDES-3.1.3/plugins") // for development
        archiveFileName.set("IDES3script.IDES3script.jar")

        configurations["compileClasspath"].forEach { file: File ->
            from(zipTree(file.absoluteFile))
        }
    }
}

tasks {
    withType<Test> {
        testLogging {
            showExceptions = true
            showStandardStreams = true
            events(PASSED, SKIPPED, FAILED)
        }
    }
}